function dlp2 = DLP2(x, d)
% DLP2 - Calcolo nodi di Leja approssimati (Algoritmo 2)
% Crescita quasi lineare (in teoria) --> LU più efficiente
%
% Input:
%   x - vettore colonna di punti della mesh nell'intervallo [-1,1]
%   d - grado del polinomio interpolante (scalare intero positivo)
%
% Output:
%   dlp2 - vettore riga di d+1 nodi di Leja approssimati
%
% Algoritmo: fattorizzazione LU con pivoting della matrice di Vandermonde
% costruita con i polinomi di Chebyshev

    % Validazione input
    if ~isvector(x) || ~isscalar(d) || d < 0 || round(d) ~= d || length(x) < d+1
        error('Input non valido: x deve essere un vettore, d intero positivo, length(x) >= d+1');
    end
    
    % Assicura che x sia vettore colonna
    x = x(:);
    
    % Costruisce la matrice di Vandermonde con base di Chebyshev, base che
    % serve per trovare massimo nel modo più efficiente 
    % V(i,j) = T_{j-1}(x_i) = cos((j-1) * arccos(x_i))
    % dove T_k è il k-esimo polinomio di Chebyshev

    % Cheb si usa perché riusciamo a tenere in un intervallo ristretto e
    % discreto (-1, 1) gli errori sotto controllo. Questo per n+1 volte tra
    % -eps e +eps, tenendo "l'errore lì" per Vandermonde (mal condizionata)
    V = cos(acos(x) * (0:d));  % length(x) x (d+1) con length(x) = M e cioè la size della matrice di Vandermonde
    
    % Fattorizzazione LU con pivoting: P*V = L*U
    % La fattorizzazione serve per migliorare il calcolo della soluzione per ottenere delle
    % matrici in forma "buona" per ottimizzare il calcolo Cheb (interp.
    % pol), trovando le righe migliori su cui operare.

    % P contiene la permutazione che ordina i punti secondo i criteri di Leja
    [~, ~, P] = lu(V, 'vector');
    
    % I primi d+1 elementi della permutazione sono i nodi di Leja
    dlp2 = x(P(1:d+1))';  % Restituisce vettore riga
end